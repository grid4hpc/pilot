.. -*- encoding: utf-8 -*-

==================================================================================
 Интерфейс прикладного программирования сервиса запуска композитных заданий Pilot
==================================================================================

:Автор:
  Шамардин Л.В.

:Версия:
  `$Rev$` от `$Date$`

.. contents:: Содержание:
  :depth: 2

.. highlight:: javascript

.. _introduction:

Введение
========

В настоящем документе описывается спецификация на API Системы
Управления Выполнением Заданий ГридННС, имеющей рабочее название
"Pilot". Основное назначение системы |---| выполнение :ref:`заданий <job>`,

Система Pilot состоит из двух компонентов, :ref:`системы управления
выполнением заданий <job>` и :ref:`системы регистрации и контроля
выполнения задач <task>`.

.. _general:

Общие положения
===============

.. _job:

Задание
-------

Задание |---| это направленный ацикличный граф, узлами в котором
являются :ref:`задачи <task>`, а ребра задают порядок их
выполнения. Задачи, из которых состоит задание, выполняются в порядке
обхода графа. При этом в местах ветвления, если это возможно, разные
ветки графа выполняются одновременно. Задачи для выполнения передаются
в систему регистрации задач.

В настоящее время ребра графа задают только порядок выполнения
задач. Однако в будущем, возможно, ребра будут определять так же
передачу выходных данных одних задач на вход другим.

.. _task:

Задача
------

Задача является базовым элементом, который может быть выполнен
системой регистрации задач Pilot. Запуском задач на выполнение, а так
же слежением за их выполнением занимается система регистрации и
контроля выполнения задач Pilot.

В настоящее время поддерживается только один тип задач: запуск
процесса через Globus WS-GRAM. Однако, в будущем, возможно, будут
добавлены и другие типы задач, например, обращения к произвольным WSRF
или SOAP сервисам.

.. _voms:

Интерпретация VOMS-атрибутов
----------------------------

.. _voms-attr:

Значения VOMS-атрибутов
^^^^^^^^^^^^^^^^^^^^^^^

Полная семантика атрибутов FQAN описывается в `Artifact artf6312: The
VOMS Attribute Certificate Format`_. В настоящей документации
описываются детали, необходимые для работы сервиса Pilot.

.. _`Artifact artf6312: The VOMS Attribute Certificate Format`: http://forge.gridforum.org/sf/go/artf6312

Атрибуты FQAN могут содержать информацию о членстве в группах и о
ролях в группах.

- Членство в группе: ``/«vo name»/«subgroup»/.../«subgroup»``
- Роль в группе: ``/«vo name»/«subgroup»/.../«subgroup»/Role=«role
  name»/Capability=«capability name»``

В случаях, если особенной роди или особенной возможности (Capability)
у пользователя нет, соответствующие значения принимают вид
``/Role=NULL`` и ``/Capability=NULL``. Кроме того, части атрибута,
имеющие такие значения можно не указывать. То есть следующие значения
атрибутов являются эквивалентными:

- ``/testbed``
- ``/testbed/Role=NULL``
- ``/testbed/Capability=NULL``
- ``/tesbted/Role=NULL/Capability=NULL``

Порядок атрибутов FQAN является значимым. Обработка атрибутов FQAN
должна проводиться именно в том порядке, в котором они присутствуют в
сертификате.

.. _voms-eval:

Расширения VOMS в цепочке делегирования
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

В цепочке делегирования прокси-сертификата VOMS-расширения могут
присутствовать в любом из прокси-сертификатов цепочки. Сервис pilot
будет использовать наиболее близкие к концу цепочки voms-расширения,
то есть те расширения, которые находятся в самых последних делегациях.

.. _datetime:

Представление даты и времени
----------------------------

Во всех запросах к сервису и ответах сервиса дата и время записываются
в формате ISO 8601 во временной зоне UTC. В записи могут прсутствовать
доли секунды.

Запросы к серверу
=================

Система Pilot реализована как веб-сервис, следующий концепции REST_, с
представлением документов в виде JSON_-документов.

.. _REST: http://en.wikipedia.org/wiki/Representational_State_Transfer
.. _JSON: http://json.org/

Далее будем считать, что элементу ``pilot/`` соответствует корневой URI
всех сервисов, например, ``https://pilot.ngrid.ru/``.

Все данные передаются в формате JSON. Формальные описания форматов
приводятся в виде `JSON Schema`_

.. _`JSON Schema`: http://www.json.com/json-schema-proposal/

Ресурсы сервиса pilot:

 - ``pilot/jobs/`` |---| все задания данного пользователя;
 - ``pilot/jobs/«jobid»/`` |---| задание;
 - ``pilot/jobs/«jobid»/«taskid»/`` |---| задача задания;

При отправке всех запросов для установления https-соединения
необходимо использовать прокси-сертификат пользователя, со всеми
необходимыми расширениями.

Все запросы, отправляемые на сервер, имеющие не пустое тело, должны
содержать заголовок Content-MD5. Все ответы сервера, имеющие не пустое
тело, всегда содержат заголовок Content-MD5.

.. contents::
  :local:

Управление заданиями и задачами
===============================

.. _jobs-list:

Список заданий пользователя
---------------------------

Задания пользователя образуют коллекцию ``pilot/jobs``. Запрос GET к
коллекции возвращает список всех заданий пользователя вида::

  [ 
    { 
      "uri": "«url»",
      "job_id": "«job_id»"
    }, ...
  ]

Значения атрибутов:

**uri**, *строка*
  Точный URI задания. Вообще говоря, адреса заданий всегда имеют вид ``pilot/jobs/«job_id»``.

**job_id**, *строка*
  Идентификатор задания.

Возможные коды HTTP ответа: 200_, 401_.

Пример ответа сервера::

  [
    {
      "uri": "https://tb01.ngrid.ru:5053/jobs/0klbMIJe", 
      "job_id": "0klbMIJe"
    }, 
    {
      "uri": "https://tb01.ngrid.ru:5053/jobs/jgKbv6Pp", 
      "job_id": "jgKbv6Pp"
    }
  ]

.. _jobs-create:

Создание нового задания
-----------------------

Не идемпотентный протокол
^^^^^^^^^^^^^^^^^^^^^^^^^

Для создания новых заданий используется запрос ``POST`` по адресу ``pilot/jobs``, содержащий
JSON-объект со следующими атрибутами::

  { "definition": ...,
    "delegation_id": "...",
    "proxy": "..."
  }

Значения атрибутов:

**definition**, *объект*
  Описание задания, и, возможно, задач, согласно :doc:`спецификации
  <jobsyntax>` описания заданий, задач и ресурсных требований.

**delegation_id**, *строка*, *может быть опциональным, см. описание атрибута proxy*
  Идентификатор делегации, которая будет использоваться для запуска
  задач задания. Делегация должна быть создана заранее.

**proxy**, *строка*, *устаревший*, *опциональный параметр*
  Данный параметр является устаревшим и не должен использоваться
  новыми клиентами. Прокси-сертификат, используемый для запуска задач
  задания. При использовании этого атрибута запрос не должен содержать
  ``delegation_id``, в противном случае данный атрибут игнорируется.

Формат ответа на запрос соответствует :ref:`списку заданий
<jobs-list>`, но содержит информацию только о созданном задании. Кроме
того, в заголовке ``Location`` также приводится URI созданного
задания.

Возможные коды HTTP ответа: 201_, 400_, 401_, 412_.

Идемпотентный протокол
^^^^^^^^^^^^^^^^^^^^^^

*TBD*

Получение информации о задании
------------------------------

Для получения информации о состоянии задания используется запрос
``GET`` к ``pilot/jobs/«jobid»/``, где ``«jobid»`` |---| идентификатор
задания.

Ответ на запрос является объектом, имеющим следующие атрибуты
(`формальное описание <schemas/job_format.js>`__):

* **created**, **modified**, *строка*

  Дата/время создания задания и дата/время последнего изменения
  задания или его состояния.

* **expires**, *строка*

  Дата/время автоматического удаления задания с сервера.

* **server_time**, *строка*
  
  Дата/время на сервере на момент генерации данного ответа сервера.

* **server_policy_url**, *строка*

  URL документа, описывающего политику сервера, применяемую к данному
  заданию. Политика сервера описывает используемые сервером умолчания,
  и ограничения.

* **owner**, *строка*
  
  DN владельца задания

* **vo**, *строка*

  Виртуальная организация, от имени которой запущено задание. null
  если неизвестно.

* **state**, *список объектов*

  История изменений состояния задания. Каждый объект имеет атрибуты:

  - **s**, *строка*
    
    Состояние задания. Возможные значения:

    * ``new``: только что созданное задание;
    * ``pending``: задание ожидает начала выполнения;
    * ``running``: задание выполняется;
    * ``paused``: выполнение задания приостановлено;
    * ``finished``: выполнение задания завершено;
    * ``aborted``: выполнение задания отменено.

  - **ts**, *строка*
  
    Дата/время, когда наступило соответствующее состояние.

  Объект состояния может так же иметь другие атрибуты, не определенные
  в данном списке.

  Текущее состояние задания соответствует элементу с наиболее свежей
  датой/временем. Порядок, в котором объекты присутствуют в списке,
  может быть произвольным.

* **operation**, *список объектов*

  Текущие операции и история выполнения операций над заданием. Каждый
  объект имеет атрибуты:

  - **op**, *строка*
    
    Операция. Возможные значения:

    * ``start``: запуск задания на выполнение;
    * ``pause``: приостановка выполнения задания;
    * ``abort``: отмена выполнения задания.

  - **id**, *строка*

    Уникальный в рамках одного задания идентификатор операции.

  - **created**, *строка*

    Дата и время помещения данной операции в очередь.

  - **completed**, *строка*

    Дата и время завершения данной операции.

  - **success**, *boolean*

    Было ли завершение операции успешным.

  - **result**, *объект*
    Расширенный результат завершения операции, произвольный объект.

  Объект операция может так же иметь другие атрибуты, не определенные
  в данном списке.

  Операции обрабатываются системой в хронологическом порядке. Порядок,
  в котором объекты присутствуют в списке, может быть произвольным.

* **definition**, *объект*
  
  Описание задания, без описания задач, согласно `спецификации
  <jobsyntax.html>`__ описания заданий, задач и ресурсных требований.

* **tasks**, *объект*

  URI задач задания. Атрибуты объекта соответствуют идентификаторам
  задач из описания задания, значения этих атрибутов |---| URI
  соответствующих задач (возможно, относительные)

* **deleted**, *boolean*

  Значение True означает, что данное задание помечено как
  удаленное. Удаленные задания доступны только для чтения.

Возможные коды HTTP ответа: 201_, 400_, 401_, 412_.

Пример ответа с информацией о задании
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Ниже приводится пример ответа сервера с информацией о задании.

.. literalinclude:: examples/job_format_example.js
   :language: javascript

[NYI] Получение частичной информации о задании
----------------------------------------------

Для получения информации о состоянии задания используется запрос
``GET`` к ``pilot/jobs/«jobid»/?parts=a;b;c...``, где
``«jobid»`` |---| идентификатор задания, а значение параметра
``parts`` содержит перечисление частей информации о задании, которую
необходимо получить.

Части информации, которые можно получить:

* ``state``: информация о состоянии задания
* ``operations``: информация об операциях над заданием

Изменение задания и выполнение операций над заданием
----------------------------------------------------

Для изменения задания, а так же для выполнения операций над заданием
(например, запуск задания), используются запросы методом ``PUT`` по
URI задания, который обычно имеет вид ``pilot/jobs/«jobid»/``.

Запрос является объектом, имеющим следующие атрибуты (`формальное
описание <schemas/job_modification_format.js>`__)

* **definition**, *объект, опциональный параметр*

  Новое описание задания и, возможно, задач, согласно `спецификации
  <jobsyntax.html>`__ описания заданий, задач и ресурсных
  требований. При наличии данного атрибута в запросе произойдет
  изменение описания задания и, возможно, задач задания. Изменение
  возможно только для заданий, находящихся в состоянии
  ``new``. Попытка изменения описания задания, находящегося в другом
  состоянии вызовет ошибку 403_. Все задачи, отсутствующие в новом
  описании задания, будут сразу же удалены с сервера. Задачи, описания
  которых отсутствуют в новом описании задания, изменены не будут.

* **operation**, *объект, опциональный параметр*

  При наличии этого параметра будет создана новая операция над
  заданием, если ее не существовало ранее. Объект имеет следующие
  атрибуты:

  - **op**, *строка*

    Выполняемая операция. Возможные значения:

      * ``start``: запустить задание на выполнение;
      * ``pause``: приостановить выполнение задания;
      * ``abort``: отменить выполнение задания.

  - **id**, *строка*

    Уникальный в рамках одного задания идентификатор
    операции. Генерация уникального id является ответственностью
    клиента, в качестве id рекомендуется использовать, например,
    uuid4.

Возможные коды HTTP ответа: 204_, 401_, 404_.

Пример запроса на запуск задания
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. literalinclude:: examples/job_modification_format_example.js
   :language: javascript

Пример ответа на запрос получения списка заданий
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. literalinclude:: examples/job_list_format_example.js
   :language: javascript

[NYI] Получение списка заданий других пользователей
---------------------------------------------------

Для получения списка заданий любых пользователей (в любом состоянии)
используется запрос методом ``GET`` к ``pilot/jobs/?owner=X`` с
дополнительным параметром ``owner`` в ``QUERY_STRING``.

Значения параметра ``owner`` интерпретируется как shell-like glob
pattern, т.е. все символы кроме ``*`` и ``?`` соответствуют самим
себе, символ ``?`` соответствует значению «один любой символ», символ
``*`` соответствует значению «ноль или более любых символов».

Ответом сервера является список объектов, каждый из которых имеет
следующие атрибуты:

* **uri**, *строка*

  URI задания

* **owner**, *строка*

  DN владельца задания.

Ответ сервера содержит только те задания, доступ к которым разрешен
согласно политике доступа к заданиям данного сервера. Например,
администратор виртуальной организации может получать доступ ко всем
заданиям пользователей данной виртуальной организации и т.п.

Удаление задания
----------------

Для удаления задания используется запрос методом ``DELETE`` по URI
задания. После удаления задания вся информация о нем и его задачах
становится недоступной. При удалении задания, которые выполняется в
момент удаления, производится принудительная остановка задания.

Возможные коды HTTP ответа: 204_, 401_, 404_.

Получение информации о задаче
-----------------------------

Для получения информации о задаче, включающей состояние задачи,
используется запрос методом ``GET`` по URI задачи, который обычно
имеет вид ``pilot/jobs/«jobid»/«taskid»/``.

Ответом сервера является объект, имеющий следующие атрибуты:

* **created**, **modified**, *строка*

  Дата/время создания задачи и дата/время последнего изменения
  задачи или ее состояния.

* **job**, *строка*

  URI задания, к которому относится данная задача.

* **state**, *список объектов*

  Список состояний задания за все время его существования. Каждое
  состояние является объектом, имеющим атрибуты:

  - **s**, *строка*
    
    Состояние. Возможные значения:

    * ``new``: новая необработанная задача;
    * ``pending``: задача ожидает начала выполнения;
    * ``running``: задача выполняется;
    * ``paused``: выполнение задачи приостановлено;
    * ``finished``: выполнение задачи завершено;
    * ``aborted``: выполнение задачи отменено.

  - **ts**, *строка*

    Дата и время перехода задачи в данное состояние.

  Возможно так же наличие дополнительных атрибутов, специфичных для
  данного состояния.

* **definition**, *объект*

  Описание задачи согласно `спецификации <jobsyntax.html>`__ описания
  заданий, задач и ресурсных требований.

* **exit_code**, *число*

  Код завершения задачи, если он известен.

* **deleted**, *boolean*

  Значение True означает, что данная задача помечена как
  удаленная. Удаленные задачи доступны только для чтения.

Возможные коды HTTP ответа: 200_, 401_, 404_.

Пример ответа с состоянием задачи
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. literalinclude:: examples/task_format_example.js
   :language: javascript

Изменение задачи
----------------

Для изменения описания задачи задачи используются запросы методом
``PUT`` по URI задачи, который обычно имеет вид
``pilot/jobs/«jobid»/«taskid»``. Запрос является объектом, имеющим
следующие атрибуты:

* **definition**, *объект*

  Новое описания задачи согласно `спецификации <jobsyntax.html>`__
  описания заданий, задач и ресурсных требований. Изменение задачи
  возможно только в том случае, если задача находится в состоянии
  ``new``. Попытка изменения описания задачи, находящейся в другом
  состоянии вызовет ошибку 403_.

Пример запроса на изменение задачи
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. literalinclude:: examples/task_modification_format_example.js
   :language: javascript

Получение информации о доступных ресурсах
-----------------------------------------

Для получения информации о доступности ресурсов для выполнения
задания, включая всего его задачи с учетом требований, используется
запрос методом ``GET`` по URI вида
``pilot/v2/jobs/«jobid»/resources``. Ответом является объект, имеющий
следующие атрибуты:

* **runnable**, *boolean*

  Можно ли выполнить все задачи задания на существующих в системе
  ресурсах. Данный атрибут имеет значение истина, если возможно
  выполнить все задачи задания на существующих ресурсах, и ложь в
  противном случае.

* **resources**, *список объектов*

  Список объектов, каждый из которых представляет информацию о
  ресурсах, подходящих для одной из задач задания. Каждый объект имеет
  следующие атрибуты:
 
  - **task_id**, *строка*

    Идентификатор задачи

  - **resources**, *список объектов*

    Список совместимых ресурсов (GRAM'ов). Каждый элемент списка
    является объектом, имеющим следующие атрибуты:

    + **host**, *строка*
      
      Имя хоста
      
    + **port**, *число*

      Порт

    + **lrms_type**, *строка*

      Тип lrms

    + **queue**, *строка*
    
      Название очереди

Поскольку выполнение matchmaking может занимать определенное время,
ответ на такой запрос к серверу может занять существенное время.

Запросы аккаунтинговой информации
=================================

Запросы аккаунтинговой информации
---------------------------------

Для получения аккаунтинговой информации необходимо использовать
запросы методом GET по в иерархии ``pilot/v2/accounting/``. Поскольку
аккаунтиговая информация может иметь значительные объемы дублирующейся
информации, клиентам рекомендуется поддерживать ``Content-Encoding``
типа ``gzip``, и сообщать об этом серверу в заголовках запроса через
заголовок ``Accept-Encoding``. Сервер по умолчанию возвращает `ответы в
формате JSON`_. Возможно возвращение `ответов в формате CSV`_, для
этого клиент должен добавить в запрос заголовок::

  Accept: text/csv

Обращения за аккаунтинговой информацией могут производиться как с
авторизацией сертификатом или прокси-сертификатом пользователя, так и
с авторизацией сертификатом хоста. Вопрос об объеме доступа к
аккаунтинговой информации по тому или иному сертификату решается со
стороны сервера.

**[NYI]** В данный момент поддерживается только формат JSON.

.. _`ответов в формате CSV`: `[NYI] Ответы в формате CSV`_

Запрос аккаунтинговой информации за заданный период времени
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Запрос производится по URI вида
``pilot/v2/accounting/period/«ts1»-«ts2»/``, где ``«ts1»`` и ``«ts2»``
могут иметь одно из следующих значений:

* ``current``: текущее дата/время на сервере.
* Дата и время во временной зоне UTC, в формате
  ``YYYYmmddHHMMSS[.FFFFFF]``, где ``YYYY`` |---| год, ``mm`` |---|
  месяц, ``dd`` |---| день, ``HH`` |---| час, ``MM`` |---| минуты,
  ``SS`` |---| секунды, ``[.FFFFFF]`` |---| доли секунды. Например:
  ``20091124124337`` соответствует 24 ноября 2009 года, 15:43:34 по
  Московскому зимнему времени, ``20051211182733.832922`` соответствует
  11 декабря 2005 года, 21:27:33 и 0.832922 секунды по Московскому
  зимнему времени.

Невыполнение следующих требований приведет к ответу с кодом 400_:

* ``«ts1»`` не может иметь значение ``current``;
* ``«ts2»`` должен быть больше ``«ts1»``.

Примеры URI запросов:

* ``pilot/v2/accounting/period/20091124000000-current/`` |---|
  аккаунтинговая информация с 00:00:00 UTC 24 ноября 2009 года по
  текущий момент

* ``pilot/v2/accounting/period/20091124000000-20091124124337.291323/``
  |---| аккаунтинговая информация с 00:00:00 UTC 24 ноября 2009 года по
  12:43:37 и 0.291323 секунды UTC 24 ноября 2009 года.

Запрос последних записей аккаунтинговой информации
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Запрос производится по URI вида ``pilot/v2/accounting/last/N/``, где
``N`` |---| количество возвращаемых записей. Возвращаются последние
``N`` записей аккаунтинга.

Ответы в формате JSON
---------------------

Ответы сервера на запросы аккаунтинга в формате JSON представляют
собой списки объектов, имеющих следующие атрибуты:

* **ts**, *строка*

  Дата и время соответствующей записи аккаунтинга, в формате ISO 8601,
  во временной зоне UTC с долями секунды.

* **user_dn**, *строка*

  Subject сертификата пользователя, являющегося владельцем задания.

* **job_id**, *строка*

  Идентификатор задания на данном сервере Pilot

* **task_id**, *строка, опциональный параметр*

  Идентификатор задачи на данном сервере Pilot, из соответствующего
  задания. null, если не имеет отношения к событию.

* **vo**, *строка*

  Виртуальная организация, к которой относится данная операция (если
  известна); null, если виртуальная организация не может быть определена.

.. _event:

* **event**, *строка*

  Учитываемое событие. Возможные значения:

  + ``job_started``: началась обработка задания. Для событий этого
    типа обязательно присутствуют поля ``job_id`` и ``user_dn``.

  + ``job_finished``: обработка задания завершилась успешно (все
    задания успешно завершились). Для событий этого типа обязательно
    присутствуют поля ``job_id`` и ``user_dn``.

  + ``job_aborted``: обработка задачи завершилась не успешно. В
    `detail`_ может содержаться task_id задачи, которая привела к
    не успешному завершению обработки задания. Для события этого типа
    обязательно присутствуют поля ``job_id`` и ``user_dn``, может
    присутствовать поле ``detail``.

  + ``task_started``: задача была запущена. В `detail`_ содержится
    информация о GRAM, на котором запущена задача, в формате
    ``host[:port]/type-queue``. Для событий этого типа обязательно
    присутствуют поля ``job_id``, ``user_dn``, ``task_id`` и
    ``detail``.

  + ``task_finished``: задача завершилась успешно. Для событий этого
    типа обязательно присутствуют поля ``job_id``, ``user_dn``,
    ``task_id``. Может присутствовать поле ``detail``, содержащее код
    завершения задачи.

  + ``task_aborted``: задача заверешилась не успешно. Для событий этого
    типа обязательно присутствуют поля ``job_id``, ``user_dn``,
    ``task_id``. Может присутствовать поле ``detail``, содержащее код
    завершения задачи.

.. _detail:

* **detail**, *строка, опциональный параметр*

  Дополнительная информация о событии. См. описание значений в
  описании параметра `event`_. null, если дополнительной информации нет.

* **info**, *объект*

  Дополнительная информация о событии, если известна; null, если
  дополнительной информации нет. Имеет различные значения для разных
  типов событий.

  + ``job_aborted`` содержит следующие атрибуты:

    - ``task_uri``: *строка*, URI задачи.

  + ``task_started`` содержит следующие атрибуты:

    - ``hostname``: *строка*, имя хоста, на которую запустилась задача.

    - ``port``: *число, опциональный параметр*, порт GRAM.

    - ``lrms_type``: *строка*, тип lrms.

    - ``queue``: *строка, опциональный параметр*, название очереди.

    - ``submission_id``: *строка*, Globus Submission ID.


[NYI] Ответы в формате CSV
--------------------------

Ответы сервера на запросы аккаунтинга в формате CSV соответствуют
спецификации `RFC 4180 <http://tools.ietf.org/html/rfc4180>`_ с
заголовками. Ответ содержит колонки ``ts``, ``user_dn``, ``job_id``,
``task_id``, ``event``, ``detail``, полностью соответствующие
соответствующим полям `ответа в формате JSON`_.

.. _`ответа в формате JSON`: `Ответы в формате JSON`_


Использование API
=================

Запуск задания
--------------

Последовательность действий, которые выполняет клиент для того, чтобы
запустить задание, следить за его состоянием и получить результаты:

1. Создать задание (``POST «base»/jobs/``). В описании задания можно
   сразу передать и описания всех задач.
2. Добавить операцию ``start`` (``PUT «base»/jobs/«jobid»/``).

Через некоторое время после этого начнется выполнение задания. За
состоянием можно следить при помощи обращений методом GET по URI
задания и/или отдельных задач.

.. _delegations:

Управление делегациями
======================

Делегация — это цепочка сертификатов (от прокси-сертификата до
сертификата пользователя), используемая для запуска задач на
грид-шлюзах.  Делегации образуют коллекцию
``pilot/delegations``. Каждая делегация имеет идентификатор,
уникальный для данного пользователя. Идентификатор может содержать
буквы латинского алфавита и цифры.

.. _delegation-list:

Список делегаций пользователя
-----------------------------

Запрос GET к коллекции делегаций возвращает список делегаций, каждый
элемент списка содержит uri делегации, а так же все :ref:`свойства
делегации <delegation-props>`::

  { "«delegation_id»": { "uri": "«url»",
                         "vo": "«vo_name»",
                         "fqans": [ "«fqan1»", ... ],
                         ...
                       },
    ...
  }

Значения атрибутов:

**uri**, *строка* 
  Точный URI данной делегации. Вообще говоря, адреса
  делегаций всегда имеют вид ``pilot/delegations/«delegation_id»``.

Значения остальных атрибутов полностью соответствуют :ref:`свойствам
делегации <delegation-props>`.

.. _delegation-props:

Свойства делегации
------------------

Адреса делегаций имеют вид ``pilot/delegations/«delegation_id»``.
Делегация является JSON-объектом со следующими атрибутами (часть из
них опциональны)::

  { "delegation_id": "«delegation_id»",
    "vo": "«vo_name»",
    "fqans": [ "«fqan1»", ... ],
    "renewable": true/false,
    "myproxy_server": "«host»:«port»",
    "credname": "«credname»",
    "next_expiration": "«timestamp»"
  }

**delegation_id** *строка, только для чтения*
  Идентификатор делегации.

**vo** *строка, только для чтения* 
  Виртуальная организация, к которой относится данная делегация.

**fqans** *список строк, только для чтения*
  Список атрибутов FQAN из VOMS-расширений делегации.

**renewable** *boolean* 
  Разрешение обновлять делегацию. Если имеет значение ``false``, то
  делегация обновляться автоматически не будет. Если имеет значение
  ``true``, то необходимо наличие правильного значения атрибута
  ``myproxy_server``.

**myproxy_server** *строка, опциональный параметр*
  Адрес MyProxy-сервера, используемого для обновления данной
  делегации.

**credname** *строка, опциональный параметр* 
  Название делегации на MyProxy-сервере. Используется, если имеет
  значение, отличное от ``null``.

**next_expiration** *строка, дата/время, только для чтения*
  Срок окончания действия текущего экземпляра делегации.

.. _delegation-create:

Создание новой делегации
------------------------

Для создания делегации используется запрос ``PUT`` по адрсеу
создаваемой делегации, содержащий JSON-объект со всеми свойствами
делегации (см. :ref:`delegation-props`), доступными для изменения. Все
обязательные свойства должны присутствовать в запросе, опциональные
могут отсутствовать. Минимальный запрос на создание новой делегации
имеет вид::

  { "renewable": true/false }

После этого необходимо провести процедуру обновления делегации по
протоклу, описанному в разделе :ref:`delegation-renew`.

.. _delegation-change:

Изменение свойств делегации
---------------------------

Для изменения свойств делегации могут используются запросы ``PUT`` по
адресу делегации. При этом запрос должен содержать JSON-объект,
содержащий все обязательные атрибуты делегации, доступные для записи,
а так же все опциональные атрибуты делегации, которые должны быть
установлены. Значения всех опциональных атрибутов, отсутствующих в
запросе, будут удалены.

Возможно также изменение атрибутов делегации отдельными запросами
``PUT`` со значением атрибута в теле запроса по адресу атрибута для
изменения, и запросами ``DELETE`` по адресу атрибута для удаления
опционального атрибута. Адреса атрибутов делегации имеют вид 
``pilot/delegations/«delegation_id»/«attribute_name»``.

.. _delegation-renew:

Обновление делегации
--------------------

Для оновления делегации клиент должен:

1. Получить ключ новой делегации, который необходимо подписать. Это
   можно сделать следующими способами:

   * Получить публичный ключ, отправив запрос ``GET`` по адресу
     ``pilot/delegations/«delegaion_id»/pubkey``. Ключ может быть
     возвращен в одном из следующих форматов:
        
     - ``application/x-pkcs1``, ``application/x-pkcs1+der``: публичный
       ключ в формате PKCS#1 [:rfc:`3447#appendix-A.1.1`, Appendix
       A.1.1];

     - ``application/x-pkcs1+pem``: публичный ключ в формате PKCS#1 в
       кодировании PEM (Base64+заголовки).

     По умолчанию используется формат ``application/x-pkcs1+pem``.

   * Получить запрос на сертификат, отправив запрос ``GET`` по адресу
     ``pilot/delegations/«delegation_id»/request``. В случае, если
     обновление делегации происходит впервые (то есть при создании
     новой делегации), subject запроса будет содержать некорректное
     значение. Запрос может быть возвращен в одном из следующих форматов:
     
     - ``application/pkcs10``, ``application/pkcs10+der``: запрос в
       формате PKCS#10 [:rfc:`2986`]

     - ``application/pkcs10+pem``: запрос в формате PKCS#10 в
       кодировании PEM (Base64+заголовки).

     По умолчанию используется формат ``application/pkcs10``.

2. Создать и подписать прокси-сертификат, использовав публичный ключ
   из предыдущего пункта.

3. Отправить прокси-сертификат со всей цепочкой сертификатов на
   сервер, используя запрос ``PUT`` по адресу
   ``pilot/delegations/«delegation_id»/renew``. Элементы цепочки
   должны передоваться в порядке от конца (нового прокси-сертификата)
   к началу (сертификату пользователя).  Цепочка может быть отправлена
   в одном из следующих форматов:
   
   - ``application/x-pkix-chain+pem``: последовательность сертификатов
     в «текстовом» представлении PEM, от конца цепочки к началу.

   - ``application/x-pkix-chain``, ``application/x-pkix-chain+der``:
     ASN.1 Sequence, состоящий из сертификатов, от конца цепочки к
     началу (т.е. результат паковки стека сертификатов OpenSSL при
     помощи функции ASN1_seq_pack_X509 из OpenSSL).

   По умолчанию используется формат ``application/x-pkix-chain+pem``.

.. _status-codes:

Коды состояния и ошибок
=======================

.. contents::
  :local:

200 OK
------

Запрос обработан без ошибок, тело ответа содержит ответ
на запрос в указанном выше формате.

201 Created
-----------

Запрос обработан без ошибок, ответ имеет пустое тело и заголовок
Location, содержащий URI созданного ресурса.

204 No Content
--------------

Запрос обработан без ошибок, ответ имеет пустое тело, содержательного
ответа на запрос не предполагается по спецификации протокола. Такой
ответ обычно является подтверждением удаления какого-либо ресурса.

400 Bad Request
---------------

Ошибка обработки запроса. Запрос содержал данные в неправильном
формате, либо пытался изменить параметры, которые нельзя
изменить.

401 Unauthorized
----------------

Ошибка обработки запроса. Доступ к запрашиваемому объекту
запрещен.

403 Forbidden
-------------

Попытка выполнения операции, которая запрещена. Например, попытка
изменить описание задания в состоянии, отличного от ``new``.

404 Not Found
-------------

Ошибка обработки запроса. Запрашиваемый ресурс не существует.

412 Precondition Failed
-----------------------

Ошибка обработки запроса. Контрольная сумма тела запроса не
соответствует заголовку Content-MD5 запроса. Тело ответа пустое.

.. |---| unicode:: U+02014 .. em dash
.. _200: `200 OK`_
.. _201: `201 Created`_
.. _204: `204 No Content`_
.. _400: `400 Bad Request`_
.. _401: `401 Unauthorized`_
.. _403: `403 Forbidden`_
.. _404: `404 Not Found`_
.. _412: `412 Precondition Failed`_
