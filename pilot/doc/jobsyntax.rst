================================================
 Описание заданий, задач и ресурсных требований
================================================

.. highlight:: javascript

Задания, задачи и требования к ресурсам описываются на языке JSON
[:rfc:`4627`].

.. _jobsyntax-job:

Описание задания
================

Описание задания не может иметь атрибутов, отличных от перечисленных
ниже.

* .. pilot:jobattr:: version 
     :type: int
     :required:

  Версия используемой схемы описания задания. Версия данной схемы 2.

* .. pilot:jobattr:: description

  Описание задания в произвольной форме, для понимания человеком.

* .. pilot:jobattr:: default_storage_base

  Относительные пути, встречающиеся во вложенных описаниях используют
  данный URI в качестве базы.

* .. pilot:jobattr:: max_transfer_attempts
     :type: int

  Количество повторных попыток передачи каждого файла, завершающихся
  неудачей, прежде чем передача в целом будет считаться
  неуспешной. Значение по умолчанию 5.

* .. pilot:jobattr:: tasks
     :type: list object 1
     :required:
   
  Задачи, из которых состоит задание. Каждый элемент списка является
  объектом со следующими свойствами:

  - .. pilot:jobattr:: id
       :required:
       :comment: разрешается использовать только символы [a-zA-Z0-9_]*

    Идентификатор задачи. Используется при обращении к задачам
    задания, а так же при указании связей задач.

  - .. pilot:jobattr:: description
       :noindex:

    Описание задачи в произвольной форме, для понимания человеком.

  - .. pilot:jobattr:: definition
       :type: object

    Описание задачи (согласно :ref:`схеме описания задачи
    <jobsyntax-task>`). Если данный параметр отсутствует, это может
    означать, что описание задачи будет загружено на сервер отдельно
    (например, из внешнего файла).

  - .. pilot:jobattr:: children
       :type: list str

    Список идентификаторов задач (**id**), дочерних для данной задачи.

  - .. pilot:jobattr:: filename
   
    Имя файла, содержащего описание задачи. При наличии одновременно
    атрибутов **filename** и **definition**, предпочтение отдается
    описанию задачи из файла, указанного в данном отрибуте.

    Данный атрибут целиком обрабатывается в ``pilot_cli`` в процессе
    запуска задания командной ``pilot-job-submit``.

  - .. pilot:jobattr:: meta
       :type: object
       :noindex:
 
    Данный атрибут предназначен для хранения любых пользовательских
    параметров экземпляра задачи, и может иметь любое содержимое.

* .. pilot:jobattr:: requirements
     :type: list object

  Объект требований к ресурсам (согласно :ref:`схеме описания
  требований к ресурсам <jobsyntax-requirements>`).

* .. pilot:jobattr:: meta
     :type: object
 
  Данный атрибут предназначен для хранения любых пользовательских
  параметров задания, и может иметь любое содержимое.

.. _jobsyntax-task:

Описание задачи
===============

Значения некоторых параметров описания задачи содержат относительные
пути к файлам. Данные пути разрешаются относительно директории, в
которой производится запуск задачи на вычислительном узле (эта
директория создается автоматически).

Описание задачи не может иметь атрибутов, отличных от перечисленных
ниже.

* .. pilot:taskattr:: version
     :type: int
     :required:

  Версия используемой схемы описания задачи. Версия данной схемы 2.

* .. pilot:taskattr:: description

  Описание задачи в произвольной форме, для понимания человеком.

* .. pilot:taskattr:: executable
     :required:

  Относительный или абсолютный путь выполняемого файла задачи.

  Если вы хотите выполнить программу, выполняемый файл которой
  находится на удаленном ресурсе, необходимо для запуска передать ее в
  :pilot:taskattr:`input_files`, и она должна иметь атрибут executable
  на удаленном ресурсе.

* .. pilot:taskattr:: arguments
     :type: list str

  Аргументы командной строки, которые будут переданы программе при
  запуске.

* .. pilot:taskattr:: environment
     :type: object

  Дополнительные переменные среды окружения, которые будут
  установлены перед запуском задачи. Атрибуты данного объекта
  являются названиями переменных окружения (и будут переведены в
  верхний регистр), значения задают значения переменных.

  Пример описания задачи, использующего этот параметр::

    { "version": 2,
      "executable": "/usr/bin/env",
      "environment":
      { "FOO": "bar",
        "qux": "XyZzy" }
    }

  При запуске такой задачи будут установлены переменные ``FOO``
  (значение ``bar``) и ``QUX`` (значение ``XyZzy``).

* .. pilot:taskattr:: count
    :type: int

  Количество процессоров, на которых будет запущена задача. Значение
  этого атрибута более 1 означает, что задача является
  MPI-задачей. Любые другие значения или отсутствие атрибута
  означают, что задача не является MPI-задачей.

* .. pilot:taskattr:: input_files
     :type: object

  .. pilot:taskattr:: output_files
     :type: object

  В данных параметрах указываются файлы и директории, которые
  передаются перед запуском и после завершения задачи. 

  При передаче файлов названия атрибутов объектов являются
  относитльными или абсолютными путями файлов на вычислительном
  узле. Соответствующие им значения могут быть либо URL'ами
  соответствующих файлов на удаленных узлах, либо относительными или
  аблютными путями, разрешаемыми относительно
  :pilot:taskattr:`default_storage_base`. Директории, в которые
  производится передача выходных файлов, должны существовать.

  Передача директорий производится по аналогичным для файлов правилам,
  но имя директории должно оканчиваться символом ``/``. Кроме того,
  для имен выходных директорий действуют следующие ограничения:

   * Если выходная директория не существует на удаленном узле, то она
     будет создана. При этом все ее родительские директории должны
     существовать. Например::
     
       "output_files": {
         "task_output/": "gsiftp://example.com/home/pupkin/work/"
       }

     Если дирекотрии :file:`/home/pupkin/work` на сервере
     ``example.com`` не существует, то при передаче выходных файлов
     будет создана директория :file:`/home/pupkin/work` и в нее будут
     скопированы все файлы из директории :file:`task_output`
     задачи. При этом директория :file:`/home/pupkin` должна
     существовать.

   * Если выходная директория существует на удаленном узле, то в нее
     будет переписано содержимое передаваемой директории. Например::
     
       "output_files": {
         "task_output/": "gsiftp://example.com/home/pupkin/work/"
       }

     Если дирекотрия :file:`/home/pupkin/work` на сервере
     ``example.com`` существует, то при передаче выходных файлов все
     файлы из директории задачи :file:`task_output` будут переписаны в
     :file:`/home/pupkin/work`.

  Если в описании задачи параметр
  :pilot:taskattr:`default_storage_base` не указан, то будет
  использоваться значение этого параметра из описания задания. В
  случае, если этот параметр указан и в описании задачи, и в описании
  задания, то значение, указанное в описании задачи имеет приоритет
  над значением, указанным в описании задания. Если параметр
  :pilot:taskattr:`default_storage_base` отсутствует как в описании
  задачи, так и в описании задания, то файлы, для которых будет указан
  путь, а не URL, будут проигнорированны.

  Пример описания задания с несколькими задачами и входными/выходными
  файлами::

    { "version": 2,
      "default_storage_base": "gsiftp://example.org/my/files/",
      "tasks": [
          { "id": "a",
            "definition":
            { "version": 2,
              "executable": "/bin/cp",
              "arguments": ["hello.txt", "qux/test.txt"],
              "input_files": 
              { "hello.txt": "hello.txt",
                "foo.txt": "/bar.txt",
                "qux": "gsiftp://example.org/my/directory/qux/"
              },
              "ouput_files":
              { "qux/test.txt": "gsiftp://example.org/my/output/117/test.txt"
              }
            }
          },
          { "id": "b",
            "definition":
            { "version": 2,
              "executable": "/bin/cat",
              "arguments": ["hello.txt", "foo.txt"],
              "default_storage_base": "gsiftp://example.org/other/files/",
              "input_files": 
              { "hello.txt": "hello.txt",
                "foo.txt": "/bar.txt"
              }
            }
          }
      ]
    }   

  В данном примере файлы будут использоваться следующим образом:

  ====== =========== ============= =======================================
  Задача Направление Локальное имя Удаленное имя
  ====== =========== ============= =======================================
  a      вход        hello.txt     gsiftp://example.org/my/files/hello.txt
  a      вход        foo.txt       gsiftp://example.org/bar.txt
  а      вход        qux           gsiftp://example.org/my/directory/qux/
  а      выход       qux/test.txt  gsiftp://example.org/my/output/117/test.txt
  b      вход        hello.txt     gsiftp://example.org/other/files/hello.txt
  b      вход        foo.txt       gsiftp://example.org/bar.txt
  ====== =========== ============= =======================================

* .. pilot:taskattr:: stdin
  .. pilot:taskattr:: stdout
  .. pilot:taskattr:: stderr

  URL, либо либо относительными или аблютными путями, разрешаемый
  относительно :pilot:taskattr:`default_storage_base` для стандартных
  потоков ввода/вывода задачи.

* .. pilot:taskattr:: default_storage_base

  URI, относительно которого разрешаются пути к удаленным файлам в
  соответсвтвующих параметрах

* .. pilot:taskattr:: max_transfer_attempts
     :type: int

  Количество повторных попыток передачи каждого файла, завершающихся
  неудачей, прежде чем передача в целом будет считаться неуспешной. По
  умолчанию используется значение этого параметра из описания всего
  задания.

* .. pilot:taskattr:: max_success_code
     :type: int

  Максимальное значение кода выхода программы, при котором завершение
  считается нормальным (не аварийным). Код выхода рассматривается как
  беззнаковое целое. Если данный параметр не указан, используется
  значение по умолчанию, равное 0.

.. _jobsyntax-task-requirements:

* .. pilot:taskattr:: requirements
    :type: object

  Объект требований к ресурсам (согласно :ref:`схеме описания
  требований к ресурсам <jobsyntax-requirements>`). Заданные значения
  из параметра :pilot:taskattr:`requirements` задачи замещают
  соответствующие значения :pilot:jobattr:`requirements` требований
  задания.

  Например, приведенные ниже фрагменты задают задачи с одинаковыми
  требованиями к ресурсам::

    { "version": 2,
      "tasks": [
          { "id": "a",
            "executable": "/bin/hostname",
            "requirements": {
                "queue": "long"
            }
          }
      ],
      "requirements": {
          "lrms": "Cleo"
      }
    }

    { "version": 2,
      "tasks": [
          { "id": "a",
            "executable": "/bin/hostname",
            "requirements": {
                "lrms": "Cleo",
                "queue": "long"
            }
          }
      ]
    }

* .. pilot:taskattr:: jobtype
     :type: str

  Тип многопроцессорной задачи. Возможные значения: `single`, `mpi`,
  `openmp`, `hybrid`. Значение по умолчанию: `single`. Данный параметр
  передается ПО грид-шлюза без изменений.

* .. pilot:taskattr:: nodes
     :type: int

  Количество узлов, резервируемых для выполнения задачи.

* .. pilot:taskattr:: ppn
     :type: int

  Количество экземпляров MPI-задачи, запускаемой на одном узле
  кластера.

* .. pilot:taskattr:: extensions
     :type: object

  Дополнительные расширения для запуска задачи. Атрибуты данного
  объекта являются названиями требуемых расширений. Значение атрибута
  может быть строкой, списком строк, объектом или списком объектов.

  Если значение является строкой, то в отправляемое на ресурс описание
  задачи вставляется единственный экземпляр расширения с указанным
  значением.

  Если значение является списком строк, то в отправляемое на ресурс
  описание задачи вставляется несколько экземпляров данного расширения
  со всеми указанными значениями

  Если значение является объектом, то оно интерпретируется как
  расширение внутри расширения согласно правилам для атрибута
  :pilot:taskattr:`extensions` описания задачи, и вставляется
  единственный экземпляр расширения.

  Если значение является списком объектов, то в отправляемое на ресурс
  описание задачи вставляются все описания, полученные для каждого
  объекта из списка.

  Пример::

    "extensions": { "softenv": ["+gcc-4.4.3", "+libcrypto.so.1.0.0"],
                    "nodes": "activemural:ppn=10+5:ia64-compute:ppn=2",
                    "resourceAllocationGroup": {
                        "hostName": ["vis001", "vis002"],
                        "cpuCount": "10"
                    },
                    "complications": [
                        { "extraCase": "13" },
                        { "extraCase": "15", "sin": "13" }
                    ]
    }

  Такое описание будет трансформировано в:

  .. code-block:: xml
    
     <extensions>
       <softenv>+gcc-4.4.3</softenv>
       <softenv>+libcrypto.so.1.0.0</softenv>
       <nodes>activemural:ppn=10+5:ia64-compute:ppn=2</nodes>
       <resourceAllocationGroup>
         <hostName>vis001</hostName>
         <hostName>vis002</hostName>
         <cpuCount>10</cpuCount>
       </resourceAllocationGroup>
       <complications>
         <extraCase>13</extraCase>
       </complications>
       <complications>
         <extraCase>15</extraCase>
         <sin>13</sin>
       </complications>

* .. pilot:taskattr:: meta
     :type: object
 
  Данный атрибут предназначен для хранения любых пользовательских
  параметров задачи, и может иметь любое содержимое.

.. _jobsyntax-requirements:

Описание требований к ресурсам
==============================

Требования к ресурсам явлюятся объектами, соответствующими следующему
описанию. Результирующее требование задачи к ресурсам получается путем
обновления требований к ресурсам всего задания требованиями к ресурсам
выбранной задачи. См. :ref:`пример <jobsyntax-task-requirements>` в
описании параметра :pilot:taskattr:`requirements` задачи.

Все параметры в описании требований к ресурсам являются
опциональными. Если это не оговоренно специально, то значения по
умолчанию для каждого из параметров обеспечивают выбор любого ресурса,
удовлетворяющего остальным требованиям.

* .. pilot:reqattr:: hostname
     :type: list str
   
  Список допустимых имен хостов, на которых может выполняться задача.

* .. pilot:reqattr:: lrms

  Тип подходящей batch-системы (например: ``Fork``, ``PBS``, ``Cleo``).

* .. pilot:reqattr:: fork
     :type: bool

  Разрешить использовать lrms Fork в процессе выбора ресурсов. По
  умолчанию, если данный параметр не указан, или имеет значение
  :js:data:`false`, Fork будет использоваться только в том случае,
  если он явно выбран как тип lrms в параметре :pilot:reqattr:`lrms`.

* .. pilot:reqattr:: queue

  Название очереди batch-системы, в которой должна выполняться задача.

* .. pilot:reqattr:: os_name
  .. pilot:reqattr:: os_release
  .. pilot:reqattr:: os_version
  .. pilot:reqattr:: platform
  .. pilot:reqattr:: cpu_instruction_set

  Параметры кластера из информационной системы. Проверяются на
  совпадение. Допускается использование wildcards (* = ноль или более
  любых символов, ? = один любой символ).

* .. pilot:reqattr:: smp_size 
     :type: int
  .. pilot:reqattr:: ram_size
     :type: int
  .. pilot:reqattr:: virtual_size
     :type: int
  .. pilot:reqattr:: cpu_hz
     :type: int

  Параметры кластера из информационной системы. Проверяется, что
  значение из требований задачи не меньше, чем значение из
  информационной системы.

* .. pilot:reqattr:: software

  Требования к установленному на кластере ПО, перечисленные через
  запятую (то есть: ``требование1, требование2, ...``). Каждое
  отдельное требование может иметь вид: 

  - ``название`` означает, что необходим пакет ``название``.

  - ``название операция версия``. Требования пакета ``название``
    указанной версии. Допустимые операции: ``<, <=, ==, >, >=``.

  Пример::

    "software": "mvapich, abinit > 6, orca==2.6.35"

  Такая запись означает, что задаче требуетс пакет ``mvapich`` любой
  версии, пакет ``abinit`` версии старше, чем ``6`` и пакет ``orca``
  строго версии ``2.6.35``.

.. _jobsyntax-substitution:

Автоматическая подстановка параметров
=====================================

Во всех параметрах описаний заданий и задач, которые могут содержать
пути к файлам, производится автоматическая замена некоторых
подстрок.

 - В описании задания замена производится для значения параметра
   :pilot:jobattr:`default_storage_base`.

 - В описании задачи замена производится для:

   - значений параметров :pilot:taskattr:`default_storage_base`,
     :pilot:taskattr:`executable`, :pilot:taskattr:`arguments`,
     :pilot:taskattr:`stdin`, :pilot:taskattr:`stdout`,
     :pilot:taskattr:`stderr`;
   - значений атрибутов параметра :pilot:taskattr:`environment`;
   - ключей и значений параметров :pilot:taskattr:`input_files`,
     :pilot:taskattr:`output_files`.

Заменяемые подстроки представляют собой последовательности латинских
букв в фигурных скобках и имеют вид ``{something}``. Далее приведен
список всех поддерживаемых автоматически заменяемых подстрок и
значений, на которые будет произведена замена.

+-----------------+----------------------------------------------------------+
| Параметр        | Значение                                                 |
+=================+==========================================================+
| ``{jobid}``     | Идентификатор задания                                    |
+-----------------+----------------------------------------------------------+
| ``{taskid}``    | Идентификатор задачи                                     |
+-----------------+----------------------------------------------------------+
| ``{lrms_host}`` | Имя хоста грид-шлюза, используемого для запуска задачи   |
+-----------------+----------------------------------------------------------+
| ``{lrms_port}`` | Порт грид-шлюза, используемого для запуска задачи        |
+-----------------+----------------------------------------------------------+
| ``{lrms}``      | Тип менеджера ресурсов, используемого для запуска задачи |
+-----------------+----------------------------------------------------------+
| ``{queue}``     | Название очереди, в которую производится запуск задачи   |
+-----------------+----------------------------------------------------------+

В том случае, если подстрока в фигурных скобках отсутствует в данной
таблице, она не будет подвержена автозамене и будет оставлена как
есть.
